#include <iostream>
using namespace std;

struct BloqueMemoria {
    int direccion; // dirección simulada
    int tamano;    // tamaño del bloque en KB o MB
    BloqueMemoria* siguiente;
};

BloqueMemoria* tope = NULL;
int contadorDireccion = 1000; // dirección base simulada

void asignarMemoria() {
    BloqueMemoria* nuevo = new BloqueMemoria();

    cout << "Tamaño del bloque a asignar (en KB): ";
    cin >> nuevo->tamano;

    nuevo->direccion = contadorDireccion;
    contadorDireccion += nuevo->tamano; // simulamos avance de dirección

    nuevo->siguiente = tope;
    tope = nuevo;

    cout << "Bloque de memoria asignado. Dirección: " << nuevo->direccion << "\n";
}

void liberarMemoria() {
    if (tope == NULL) {
        cout << "No hay memoria asignada para liberar.\n";
        return;
    }

    BloqueMemoria* temp = tope;
    tope = tope->siguiente;
    cout << "Memoria en dirección " << temp->direccion << " liberada.\n";
    delete temp;
}

void mostrarTope() {
    if (tope == NULL) {
        cout << "No hay memoria asignada.\n";
        return;
    }

    cout << "Bloque en la cima de la pila:\n";
    cout << "Dirección: " << tope->direccion << ", Tamaño: " << tope->tamano << " KB\n";
}

void mostrarPila() {
    if (tope == NULL) {
        cout << "No hay memoria asignada.\n";
        return;
    }

    BloqueMemoria* temp = tope;
    cout << "--- Bloques de memoria asignados ---\n";
    while (temp != NULL) {
        cout << "Dirección: " << temp->direccion << ", Tamaño: " << temp->tamano << " KB\n";
        temp = temp->siguiente;
    }
}

void menu() {
    int opcion;
    do {
        cout << "\n--- GESTOR DE MEMORIA (PILA) ---\n";
        cout << "1. Asignar memoria (push)\n";
        cout << "2. Liberar memoria (pop)\n";
        cout << "3. Ver cima de la pila\n";
        cout << "4. Ver todos los bloques asignados\n";
        cout << "5. Salir\n";
        cout << "Opción: ";
        cin >> opcion;

        switch (opcion) {
            case 1: asignarMemoria(); break;
            case 2: liberarMemoria(); break;
            case 3: mostrarTope(); break;
            case 4: mostrarPila(); break;
            case 5: cout << "Saliendo del gestor...\n"; break;
            default: cout << "Opción inválida.\n";
        }
    } while (opcion != 5);
}

int main() {
    menu();
}
